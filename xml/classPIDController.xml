<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classPIDController" kind="class" language="C++" prot="public">
    <compoundname>PIDController</compoundname>
    <includes refid="PIDController_8h" local="no">PIDController.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classPIDController_1ac855ceb88c5baea0b389a57a78292c76" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::kp_</definition>
        <argsstring></argsstring>
        <name>kp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="35" column="12" bodyfile="PIDController.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPIDController_1a79803fca397bf1d4afc6298ff2c56b50" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::ki_</definition>
        <argsstring></argsstring>
        <name>ki_</name>
        <briefdescription>
<para>Proportional gain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="36" column="12" bodyfile="PIDController.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPIDController_1aa2e284369bcf62a446185cee88c4413a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::kd_</definition>
        <argsstring></argsstring>
        <name>kd_</name>
        <briefdescription>
<para>Integral gain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="37" column="12" bodyfile="PIDController.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPIDController_1a8bc3ec18d33da3afc15903e24f81851b" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::setpoint_</definition>
        <argsstring></argsstring>
        <name>setpoint_</name>
        <briefdescription>
<para>Derivative gain. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="38" column="12" bodyfile="PIDController.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPIDController_1a07f426a715aec6402a01c4f979af028d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::integral_</definition>
        <argsstring></argsstring>
        <name>integral_</name>
        <briefdescription>
<para>Target setpoint in CFM. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="39" column="12" bodyfile="PIDController.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPIDController_1aa45c4bbcdf33fc54a2a1c3c9b8241be6" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::prevError_</definition>
        <argsstring></argsstring>
        <name>prevError_</name>
        <briefdescription>
<para>Integral accumulator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="40" column="12" bodyfile="PIDController.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classPIDController_1a97e5b7df235c9f376d472abc56afa9c0" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double PIDController::output_</definition>
        <argsstring></argsstring>
        <name>output_</name>
        <briefdescription>
<para>Previous error. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="41" column="12" bodyfile="PIDController.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classPIDController_1a023e7655950d10475bdd17c6f6d61fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PIDController::PIDController</definition>
        <argsstring>(double kp, double ki, double kd, double setpoint)</argsstring>
        <name>PIDController</name>
        <param>
          <type>double</type>
          <declname>kp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ki</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>setpoint</declname>
        </param>
        <briefdescription>
<para>Constructor for <ref refid="classPIDController" kindref="compound">PIDController</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kp</parametername>
</parameternamelist>
<parameterdescription>
<para>Proportional gain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ki</parametername>
</parameternamelist>
<parameterdescription>
<para>Integral gain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kd</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative gain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>setpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired setpoint (target flow rate in CFM). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="17" column="5" bodyfile="PIDController.cpp" bodystart="3" bodyend="4"/>
      </memberdef>
      <memberdef kind="function" id="classPIDController_1a1d9c92c101ccdfd06e9429c896841faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PIDController::setGains</definition>
        <argsstring>(double kp, double ki, double kd)</argsstring>
        <name>setGains</name>
        <param>
          <type>double</type>
          <declname>kp</declname>
        </param>
        <param>
          <type>double</type>
          <declname>ki</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kd</declname>
        </param>
        <briefdescription>
<para>Set PID gains. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kp</parametername>
</parameternamelist>
<parameterdescription>
<para>Proportional gain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ki</parametername>
</parameternamelist>
<parameterdescription>
<para>Integral gain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kd</parametername>
</parameternamelist>
<parameterdescription>
<para>Derivative gain. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="PIDController.h" line="25" column="10" bodyfile="PIDController.cpp" bodystart="6" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="classPIDController_1a0f48f0eb9957996baabd63351fbe2b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double PIDController::update</definition>
        <argsstring>(double measurement)</argsstring>
        <name>update</name>
        <param>
          <type>double</type>
          <declname>measurement</declname>
        </param>
        <briefdescription>
<para>Update the PID controller with the current measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>measurement</parametername>
</parameternamelist>
<parameterdescription>
<para>The current flow rate measurement in CFM. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The control output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Calculate error</para>
<para>Calculate the integral term with anti-windup protection</para>
<para>Add your own anti-windup threshold here</para>
<para>Calculate the derivative term</para>
<para>Calculate the control output</para>
<para>Store the current error for the next iteration</para>
        </inbodydescription>
        <location file="PIDController.h" line="32" column="12" bodyfile="PIDController.cpp" bodystart="12" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>PID Controller class for controlling the suction mechanism of an APC machine. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="PIDController.h" line="8" column="1" bodyfile="PIDController.h" bodystart="8" bodyend="42"/>
    <listofallmembers>
      <member refid="classPIDController_1a07f426a715aec6402a01c4f979af028d" prot="private" virt="non-virtual"><scope>PIDController</scope><name>integral_</name></member>
      <member refid="classPIDController_1aa2e284369bcf62a446185cee88c4413a" prot="private" virt="non-virtual"><scope>PIDController</scope><name>kd_</name></member>
      <member refid="classPIDController_1a79803fca397bf1d4afc6298ff2c56b50" prot="private" virt="non-virtual"><scope>PIDController</scope><name>ki_</name></member>
      <member refid="classPIDController_1ac855ceb88c5baea0b389a57a78292c76" prot="private" virt="non-virtual"><scope>PIDController</scope><name>kp_</name></member>
      <member refid="classPIDController_1a97e5b7df235c9f376d472abc56afa9c0" prot="private" virt="non-virtual"><scope>PIDController</scope><name>output_</name></member>
      <member refid="classPIDController_1a023e7655950d10475bdd17c6f6d61fc6" prot="public" virt="non-virtual"><scope>PIDController</scope><name>PIDController</name></member>
      <member refid="classPIDController_1aa45c4bbcdf33fc54a2a1c3c9b8241be6" prot="private" virt="non-virtual"><scope>PIDController</scope><name>prevError_</name></member>
      <member refid="classPIDController_1a1d9c92c101ccdfd06e9429c896841faf" prot="public" virt="non-virtual"><scope>PIDController</scope><name>setGains</name></member>
      <member refid="classPIDController_1a8bc3ec18d33da3afc15903e24f81851b" prot="private" virt="non-virtual"><scope>PIDController</scope><name>setpoint_</name></member>
      <member refid="classPIDController_1a0f48f0eb9957996baabd63351fbe2b45" prot="public" virt="non-virtual"><scope>PIDController</scope><name>update</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
